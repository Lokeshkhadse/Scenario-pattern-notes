import java.util.*;

import java.util.stream.Collectors;

import java.util.stream.IntStream;


class Main {
    
     public static void main(String[] args) {
        
     List<Integer>list = Arrays.asList(1,2,3,4,5,1);
     
       Map<Boolean,List<Integer>> ls = list.stream().collect(Collectors.partitioningBy(num -> num % 2 == 0));
        System.out.println(ls);
        
  
 
      // IntStream.rangeClosed(10,100).filter(no -> no % 2 != 0).
      
   
     // forEach(sys -> System.out.print(" " + sys + " "));
        
      
   
       list.stream().sorted().forEach(System.out::print);
       
       
       System.out.println("_______________________");
      

       list.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);
        
    

          int sum = list.stream().mapToInt(Integer::intValue).sum();
       
          System.out.println("sum is " + sum);
        
   

          double avg = list.stream().mapToInt(Integer::intValue).average().orElse(0.0);
     
          System.out.println("average is " + avg);
        
   

           list.stream().distinct().forEach(System.out::println);
             
 System.out.println("_______________________");

   


  int summ =  list.stream().mapToInt(Integer::intValue).map(number -> number * number).sum();
     
        System.out.println("sum of all square " + summ);
    
 

   int secondLargest = list.stream().sorted(Comparator.reverseOrder()).skip(1).findFirst().orElse(-1);
   
 System.out.println("secondLargest is " + secondLargest);
    
    

int secondSmallest = list.stream().mapToInt(i -> i).distinct().sorted().skip(1).findFirst().orElse(-1);
   
 System.out.println("secondSmallest is " + secondSmallest);
    
    

int[] no = {1,2,3,4,5 ,53,51};
   
 int secondSmallest1 = Arrays.stream(no).boxed().sorted().skip(1).findFirst().orElse(-1);
       
 System.out.println("secondSmallest1 is " + secondSmallest1);
        
    

int firstEleGreaterThan50 = Arrays.stream(no).filter(n -> n > 50).findFirst().orElse(-1);
  
          System.out.println("firstEleGreaterThan50 is " + firstEleGreaterThan50);
     

 List<Integer> lll = Arrays.stream(no).filter(nn -> nn > 50).boxed().collect(Collectors.toList());
 
   System.out.print( " " + lll + " ");
                 
 System.out.println("_______________________");
                  
 

 int[][] twoD = new int[][] {{1,2},{3,4},{5,6}};
  
  
int sumtwoD = Arrays.stream(twoD).flatMapToInt(val ->Arrays.stream(val) ).sum();
    
  System.out.print( " " + sumtwoD + " ");
 System.out.println("_______________________");


 

 List<List<Integer>> list2D = Arrays.asList
(Arrays.asList(1,2,3,4),Arrays.asList(5,6,7,8)
  );
      
    

int sumo = list2D.stream().flatMap(lst -> lst.stream()).reduce((a,b) -> a+b).orElse(-1);
        
  System.out.print( " " + sumo + " ");
    

System.out.println("another  way");
   
    

int sumo1 = list2D.stream().flatMap(l1st -> l1st.stream()).mapToInt(Integer::intValue).sum();
      
    System.out.print( " " + sumo1 + " ");
  
  

// List<Integer>list = Arrays.asList(1,2,3,4,5,1);
//   
Map<Integer,Integer> as = list.stream().distinct().collect(Collectors.toMap( n1 -> n1, n -> n * n));

//       System.out.println(as);
      
    

 list.stream().distinct()
.collect(Collectors.toMap( n1 -> n1, n -> n * n)).forEach((key , value) -> {
 System.out.println(key + " --> " + value);
  });
 

    
     //    int[] no = {1,2,3,4,5 ,53,51};
    
        Map<Integer,Integer> map1 = Arrays.stream(no).boxed()
 .collect(Collectors.toMap( n1 -> n1, n -> n * n));
  
     System.out.println("map1 -> " + map1);
    
   System.out.println("_______________________");
     
  

   Map<Boolean,List<Integer>> partition = Arrays.stream(no).boxed() .collect(Collectors.partitioningBy(numbers -> numbers % 2 == 0));
       
 System.out.println("partitioningBy -> " + partition);
   
    

 int product = Arrays.stream(no).reduce((a,b) -> a*b).orElse(-1);
     
System.out.println("product is " + product);
 


    

}
}          


ansers
{false=[1, 3, 5, 1], true=[2, 4]}

112345_______________________

5
4
3
2
1
1

sum is 16

average is 2.6666666666666665

1
2
3
4
5
_______________________

sum of all square 56

secondLargest is 4
secondSmallest is 2

secondSmallest1 is 1

firstEleGreaterThan50 is 53
 
[53, 51] _______________________
 
21 _______________________
 
36 another  way
 36
 1 --> 1
2 --> 4
3 --> 9
4 --> 16
5 --> 25

map1 -> {1=1, 2=4, 3=9, 51=2601, 4=16, 5=25, 53=2809}

_______________________
partitioningBy -> {false=[1, 3, 5, 53, 51], true=[2, 4]}

product is 324360